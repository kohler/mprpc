// -*- mode: c++ -*-
#ifndef VRCLIENT_THH
#define VRCLIENT_THH 1
#include "vrview.hh"
#include <tamer/tamer.hh>
#include <deque>
#include <random>
class Vrchannel;

class Vrclient : public tamer::tamed_class {
  public:
    Vrclient(std::shared_ptr<Vrchannel> me,
             const Vrview& config,
             std::mt19937& rg);
    ~Vrclient();

    tamed void connect(tamer::event<> done);
    tamed void request(Json req, tamer::event<Json> done);
    inline void request(Json req, tamer::event<> done);

  private:
    unsigned client_seqno_;
    tamer::event<> at_view_change_;
    Vrchannel* channel_;
    std::shared_ptr<Vrchannel> me_;
    Vrview view_;
    Json peer_names_;
    bool stopped_;
    std::deque<std::pair<unsigned, tamer::event<Json> > > at_response_;
    std::mt19937& rg_;

    tamed void connection_loop(std::shared_ptr<Vrchannel> peer);
    void process_response(Json msg);
    void process_view(Json msg);
    void merge_view_peer_names();
    inline String random_replica_uid() const;
};

inline void Vrclient::request(Json req, tamer::event<> done) {
    request(std::move(req), tamer::rebind<Json>(done));
}

#endif
