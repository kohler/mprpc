// -*- mode: c++ -*-
#ifndef VRTEST_THH
#define VRTEST_THH 1
#include <set>
#include <random>
#include <unordered_map>
#include "vrlog.hh"
#include "vrchannel.hh"
#include <tamer/channel.hh>

class Vrstate;
class Vrclient;
class Vrreplica;

class Vrtestchannel;
class Vrtestlistener;
class Vrtestnode;

class Vrtestcollection {
  public:
    Vrtestcollection(unsigned seed, double loss_p);

    Vrreplica* add_replica(const String& uid);
    Vrclient* add_client(const String& uid);

    inline unsigned size() const {
        return replicas_.size();
    }
    inline unsigned f() const {
        return replicas_.size() / 2;
    }
    inline double loss_p() const {
        return loss_p_;
    }
    Json replica_configuration() const;

    Vrtestnode* test_node(const String& s) const {
        auto it = testnodes_.find(s);
        if (it != testnodes_.end())
            return it->second;
        else
            return nullptr;
    }

    double rand01() const {
        std::uniform_real_distribution<double> urd;
        return urd(rg_);
    }

    void check();

  private:
    Vrstate* state_;
    mutable std::mt19937 rg_;

    double loss_p_;

    std::unordered_map<String, Vrreplica*> replica_map_;
    std::vector<Vrreplica*> replicas_;
    std::unordered_map<String, Vrtestnode*> testnodes_;

    Vrlog<Vrlogitem, lognumber_t::value_type> committed_log_;
    lognumber_t decideno_;
    lognumber_t commitno_;

    void print_lognos() const;
    void print_log_position(lognumber_t l) const;
};

#endif
