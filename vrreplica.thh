// -*- mode: c++ -*-
#ifndef VRREPLICA_THH
#define VRREPLICA_THH 1
#include "logger.hh"
#include "vrview.hh"
#include "vrchannel.hh"
#include <tamer/ref.hh>
#include <unordered_map>
#include <random>
#include <iostream>
using tamer::event;
class Vrstate;

class Vrreplica {
  public:
    Vrreplica(Vrstate* state,
              const Vrview& config,
              Vrchannel* me,
              std::mt19937& rg);

    String uid() const {
        return me_->local_uid();
    }
    viewnumber_t view_number() const {
        return cur_view_.viewno;
    }
    const Vrview& current_view() const {
        return cur_view_;
    }

    tamed void connect(String peer_uid, event<> done);
    tamed void join(String peer_uid, event<> done);
    void join(String peer_uid, Json peer_name, event<> done);
    void join(const Vrview& config, event<> done);

    void at_view(viewnumber_t viewno, tamer::event<> done);
    void at_store(lognumber_t storeno, tamer::event<> done);
    void at_commit(lognumber_t commitno, tamer::event<> done);

    void stop();
    void go();

    inline lognumber_t first_logno() const {
        return log_.first();
    }
    inline lognumber_t decideno() const {
        return decideno_;
    }
    inline lognumber_t commitno() const {
        return commitno_;
    }
    inline lognumber_t ackno() const {
        return ackno_;
    }
    inline lognumber_t sackno() const {
        return sackno_;
    }
    inline lognumber_t last_logno() const {
        return log_.last();
    }

    inline const Vrlogitem& log_entry(lognumber_t logno) const {
        return log_[logno];
    }

    void dump(std::ostream&) const;

  private:
    Vrstate *state_;

    typedef Vrview view_type;
    view_type cur_view_;
    view_type next_view_;

    struct channel_type {
        Vrchannel* c;
        Json name;
        tamer::event<> wait;
        double backoff;
        bool connecting;
        channel_type()
            : c(0), backoff(0.001), connecting(false) {
        }
        channel_type(Vrchannel* channel)
            : c(channel), backoff(0.001), connecting(false) {
        }
    };

    Vrchannel* me_;
    mutable std::unordered_map<String, channel_type> channels_;

    lognumber_t decideno_;
    lognumber_t commitno_;
    lognumber_t ackno_;
    lognumber_t sackno_;
    Vrlog<Vrlogitem, lognumber_t::value_type> log_;

    bool next_view_sent_confirm_;
    Vrlog<Vrlogitem, lognumber_t::value_type> next_log_;

    bool stopped_;

    std::deque<std::pair<viewnumber_t, tamer::event<> > > at_view_;
    std::deque<std::pair<lognumber_t, tamer::event<> > > at_store_;
    std::deque<std::pair<lognumber_t, tamer::event<> > > at_commit_;

    // timeouts
    Vrconstants k_;
    double commit_sent_at_;
    double primary_received_at_;
    std::mt19937& rg_;

    tamer::ref ref_;

    inline bool is_primary() const {
        return cur_view_.me_primary();
    }
    inline bool in_view(viewnumber_t v) const {
        return cur_view_.viewno == v
            && (next_view_.viewno == v || !next_view_sent_confirm_);
    }
    inline bool next_view_sent_confirm() const {
        return cur_view_.viewno != next_view_.viewno
            && next_view_sent_confirm_;
    }
    inline double rand01() const {
        std::uniform_real_distribution<double> urd;
        return urd(rg_);
    }

    void check_logno() const;
    String unparse_view_state() const;

    tamed void send_peer(String peer_uid, Json msg);

    Json view_payload(const String& peer_uid);
    void send_view(Vrchannel* who, Json payload = Json(), Json seqno = Json());
    tamed void send_view(String peer_uid);
    void broadcast_view();

    void initialize_next_view();
    tamed void start_view_change();
    void primary_adopt_view_change(Vrchannel* who);

    void process_join(Vrchannel* who, const Json& msg);
    void process_view(Vrchannel* who, const Json& msg);
    void process_view_transfer_log(Vrchannel* who, Json& payload);
    void process_view_check_log(Vrchannel* who, Json& payload);
    void process_request(Vrchannel* who, const Json& msg);
    bool check_retransmitted_request(const String& client_uid,
                                     unsigned client_seqno,
                                     Json& response) const;
    void process_commit(Vrchannel* who, const Json& msg);
    void process_commit_log(const Json& msg);
    void send_ack(Vrchannel* primary);
    Json commit_log_message(lognumber_t first, lognumber_t last) const;
    void send_commit_log(Vrview::member_type* peer,
                         lognumber_t first, lognumber_t last);
    void process_ack(Vrchannel* who, const Json& msg);
    void update_commitno(lognumber_t new_commitno);
    void process_ack_update_commitno(lognumber_t new_commitno);

    template <typename T> void process_at_number(T number, std::deque<std::pair<T, tamer::event<> > >& list);

    tamed void listen_loop();
    tamed void connection_handshake(Vrchannel* peer, bool active_end,
                                    tamer::event<> done);
    tamed void connection_loop(Vrchannel* peer);
    tamed void primary_keepalive_loop();
    tamed void backup_keepalive_loop();
};


template <typename T>
void Vrreplica::process_at_number(T number, std::deque<std::pair<T, tamer::event<> > >& list) {
    for (auto it = list.begin(); it != list.end(); ++it)
        if (number >= it->first)
            it->second();
    while (!list.empty() && !list.front().second)
        list.pop_front();
}

#endif
