// -*- mode: c++ -*-
#ifndef VRREPLICA_THH
#define VRREPLICA_THH 1
#include "logger.hh"
#include "vrlog.hh"
#include "vrchannel.hh"
#include <unordered_map>
#include <random>
#include <iostream>
using tamer::event;

class Vrstate {
  public:
    inline Vrstate() {
    }
    virtual ~Vrstate() {
    }

    virtual Json commit(Json x) {
        return x;
    }
};


class Vrconstants {
  public:
    double message_timeout;
    double client_message_timeout;
    double request_timeout;
    double handshake_timeout;
    double primary_keepalive_timeout;
    double backup_keepalive_timeout;
    double view_change_timeout;
    double retransmit_log_timeout;

    Vrconstants()
        : message_timeout(1),
          client_message_timeout(1.5),
          request_timeout(10),
          handshake_timeout(5),
          primary_keepalive_timeout(1),
          backup_keepalive_timeout(2),
          view_change_timeout(0.5),
          retransmit_log_timeout(2) {
    }
};


struct Vrview {
    struct member_type {
        String uid;
        Json peer_name;
        bool acked;
        bool confirmed;

        explicit member_type(String peer_uid, Json peer_name)
            : uid(std::move(peer_uid)), peer_name(std::move(peer_name)),
              acked(false), confirmed(false),
              has_ackno_(false), has_matching_logno_(false), ackno_count_(0) {
            assert(!this->peer_name["uid"] || this->peer_name["uid"] == uid);
            this->peer_name["uid"] = this->uid;
        }

        bool has_ackno() const {
            return has_ackno_;
        }
        lognumber_t ackno() const {
            return ackno_;
        }
        unsigned ackno_count() const {
            assert(has_ackno());
            return ackno_count_;
        }
        double ackno_changed_at() const {
            return ackno_changed_at_;
        }

        bool has_matching_logno() const {
            return has_matching_logno_;
        }
        lognumber_t matching_logno() const {
            assert(has_matching_logno());
            return matching_logno_;
        }

      private:
        bool has_ackno_;
        bool has_matching_logno_;
        lognumber_t ackno_;
        lognumber_t matching_logno_;
        unsigned ackno_count_;
        double ackno_changed_at_;

        friend struct Vrview;
    };

    viewnumber_t viewno;
    std::vector<member_type> members;
    int primary_index;
    int my_index;
    unsigned nacked;
    unsigned nconfirmed;

    Vrview();
    static Vrview make_singular(String peer_uid, Json peer_name);

    inline unsigned size() const {
        return members.size();
    }
    inline unsigned f() const {
        return size() / 2;
    }
    inline String uid() const {
        return members[my_index].uid;
    }
    inline bool me_primary() const {
        return primary_index == my_index;
    }
    inline member_type& primary() {
        return members[primary_index];
    }

    inline int count(const String& uid) const;
    inline member_type* find_pointer(const String& uid);

    Json members_json() const;
    Json acks_json() const;

    bool assign(Json msg, const String& my_uid);
    void add(String uid, const String& my_uid);
    void advance();

    int compare(const Vrview& x) const;
    bool shared_quorum(const Vrview& x) const;

    void clear_preparation(bool is_next);
    void prepare(String uid, const Json& payload, bool is_next);
    void set_matching_logno(String uid, lognumber_t logno);
    void reduce_matching_logno(lognumber_t logno);

    void account_ack(member_type* peer, lognumber_t ackno);
    bool account_all_acks();
};

inline bool operator==(const Vrview& a, const Vrview& b) {
    return a.compare(b) == 0;
}

inline bool operator!=(const Vrview& a, const Vrview& b) {
    return a.compare(b) != 0;
}


class Vrreplica {
  public:
    Vrreplica(const String& group_name, Vrstate* state,
              Vrchannel* me, Json local_name, std::mt19937& rg);

    String group_name() const {
        return group_name_;
    }
    String uid() const {
        return me_ ? me_->local_uid() : String();
    }
    viewnumber_t view_number() const {
        return cur_view_.viewno;
    }
    const Vrview& current_view() const {
        return cur_view_;
    }

    tamed void connect(String peer_uid, event<> done);
    tamed void join(String peer_uid, event<> done);
    void join(String peer_uid, Json peer_name, event<> done);

    void at_view(viewnumber_t viewno, tamer::event<> done);
    void at_store(lognumber_t storeno, tamer::event<> done);
    void at_commit(lognumber_t commitno, tamer::event<> done);

    void stop();
    void go();

    inline lognumber_t first_logno() const {
        return log_.first();
    }
    inline lognumber_t decideno() const {
        return decideno_;
    }
    inline lognumber_t commitno() const {
        return commitno_;
    }
    inline lognumber_t ackno() const {
        return ackno_;
    }
    inline lognumber_t sackno() const {
        return sackno_;
    }
    inline lognumber_t last_logno() const {
        return log_.last();
    }

    inline const Vrlogitem& log_entry(lognumber_t logno) const {
        return log_[logno];
    }

    void dump(std::ostream&) const;

  private:
    String group_name_;
    Vrstate *state_;

    typedef Vrview view_type;
    view_type cur_view_;
    view_type next_view_;

    struct channel_type {
        Vrchannel* c;
        Json name;
        tamer::event<> wait;
        double backoff;
        bool connecting;
        channel_type()
            : c(0), backoff(0.001), connecting(false) {
        }
        channel_type(Vrchannel* channel)
            : c(channel), backoff(0.001), connecting(false) {
        }
    };

    Vrchannel* me_;
    mutable std::unordered_map<String, channel_type> channels_;

    lognumber_t decideno_;
    lognumber_t commitno_;
    lognumber_t ackno_;
    lognumber_t sackno_;
    Vrlog<Vrlogitem, lognumber_t::value_type> log_;

    bool next_view_sent_confirm_;
    Vrlog<Vrlogitem, lognumber_t::value_type> next_log_;

    bool stopped_;

    std::deque<std::pair<viewnumber_t, tamer::event<> > > at_view_;
    std::deque<std::pair<lognumber_t, tamer::event<> > > at_store_;
    std::deque<std::pair<lognumber_t, tamer::event<> > > at_commit_;

    // timeouts
    Vrconstants k_;
    double commit_sent_at_;
    double primary_received_at_;
    std::mt19937& rg_;

    inline bool is_primary() const {
        return cur_view_.me_primary();
    }
    inline bool in_view(viewnumber_t v) const {
        return cur_view_.viewno == v
            && (next_view_.viewno == v || !next_view_sent_confirm_);
    }
    inline bool between_views() const {
        return cur_view_.viewno != next_view_.viewno
            && next_view_sent_confirm_;
    }
    inline double rand01() const {
        std::uniform_real_distribution<double> urd;
        return urd(rg_);
    }

    String unparse_view_state() const;

    tamed void send_peer(String peer_uid, Json msg);

    Json view_payload(const String& peer_uid);
    void send_view(Vrchannel* who, Json payload = Json(), Json seqno = Json());
    tamed void send_view(String peer_uid);
    void broadcast_view();

    void initialize_next_view();
    tamed void start_view_change();
    void primary_adopt_view_change(Vrchannel* who);

    void process_join(Vrchannel* who, const Json& msg);
    void process_view(Vrchannel* who, const Json& msg);
    void process_view_transfer_log(Vrchannel* who, Json& payload);
    void process_view_check_log(Vrchannel* who, Json& payload);
    void process_request(Vrchannel* who, const Json& msg);
    void process_commit(Vrchannel* who, const Json& msg);
    void process_commit_log(const Json& msg);
    Json commit_log_message(lognumber_t first, lognumber_t last) const;
    void send_commit_log(Vrview::member_type* peer,
                         lognumber_t first, lognumber_t last);
    void process_ack(Vrchannel* who, const Json& msg);
    void update_commitno(lognumber_t new_commitno);
    void process_ack_update_commitno(lognumber_t new_commitno);

    template <typename T> void process_at_number(T number, std::deque<std::pair<T, tamer::event<> > >& list);

    tamed void listen_loop();
    tamed void connection_handshake(Vrchannel* peer, bool active_end,
                                    tamer::event<> done);
    tamed void connection_loop(Vrchannel* peer);
    tamed void primary_keepalive_loop();
    tamed void backup_keepalive_loop();
};


class Vrclient {
  public:
    Vrclient(Vrchannel* me, std::mt19937& rg);
    ~Vrclient();

    tamed void connect(String peer_uid, Json peer_name, event<> done);
    inline void connect(String peer_uid, event<> done);
    tamed void request(Json req, event<Json> done);
    inline void request(Json req, event<> done);

  private:
    String uid_;
    unsigned client_seqno_;
    Vrchannel* me_;
    Vrchannel* channel_;
    Vrview view_;
    bool stopped_;
    std::deque<std::pair<unsigned, tamer::event<Json> > > at_response_;
    std::mt19937& rg_;

    tamed void connection_loop(Vrchannel* peer);
    void process_response(Json msg);
    void process_view(Json msg);
};


template <typename T>
void Vrreplica::process_at_number(T number, std::deque<std::pair<T, tamer::event<> > >& list) {
    for (auto it = list.begin(); it != list.end(); ++it)
        if (number >= it->first)
            it->second();
    while (!list.empty() && !list.front().second)
        list.pop_front();
}

inline void Vrclient::connect(String peer_uid, event<> done) {
    connect(peer_uid, Json::object("uid", peer_uid), done);
}

inline void Vrclient::request(Json req, event<> done) {
    request(std::move(req), tamer::rebind<Json>(done));
}

#endif
