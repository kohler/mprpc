// -*- mode: c++ -*-
#ifndef MPVR_THH
#define MPVR_THH 1
#include "string.hh"
#include <unordered_map>
#include <iostream>
using tamer::event;

class Vrendpoint {
  public:
    inline Vrendpoint(const String& uid)
        : uid_(uid), connection_version_(0) {
    }
    virtual ~Vrendpoint() {
    }

    inline const String& uid() const {
        return uid_;
    }
    inline unsigned connection_version() const {
        return connection_version_;
    }
    virtual Json name() const;

    static String make_uid();

    //virtual bool connected() const;
    //virtual void connect(event<bool> done);
    virtual void connect(Json def, event<Vrendpoint*> done);
    virtual void receive_connection(event<Vrendpoint*> done);

    virtual void send(Json msg);
    virtual void receive(event<Json> done);

  protected:
    String uid_;
    unsigned connection_version_;
};


class Vrgroup {
  public:
    typedef unsigned viewnumber_t;
    typedef int viewnumberdiff_t;

    Vrgroup(const String& group_name, Vrendpoint* me);

    String group_name() const {
        return group_name_;
    }
    String uid() const {
        return me_ ? me_->uid() : String();
    }
    viewnumber_t view_number() const {
        return view_.viewno;
    }
    size_t commit_number() const {
        return commitno_;
    }

    template <typename T>
    event<T> timeout(event<T> done) const {
        return tamer::add_timeout(3, done);
    }
    template <typename R, typename T>
    event<T> timeout(tamer::preevent<R, T>&& done) const {
        return tamer::add_timeout(3, std::move(done));
    }

    tamed void connect(Json peer, event<Vrendpoint*> done);

    void dump(std::ostream&) const;

  private:
    String group_name_;

    struct view_type {
        viewnumber_t viewno;
        Json members;
        int primary_index;
        int my_index;

        view_type();
        bool assign(Json msg, const String& my_uid);
        inline Json& find(const String& uid);
        inline String primary_uid() const;
        bool operator==(const view_type& x) const;
        bool operator!=(const view_type& x) const { return !(*this == x); }
        bool shared_quorum(const view_type& x) const;

        void set_me(const String& uid);
    };

    view_type cur_view_;
    view_type next_view_;

    Vrendpoint* me_;
    mutable std::unordered_map<String, Vrendpoint*> endpoints_;

    size_t commitno_;
    std::deque<Json> log_;

    int next_view_prepared_;
    int next_view_confirmed_;
    bool next_view_sent_confirm_;

    Vrendpoint* primary(const view_type& v) const;
    String unparse_view_state() const;

    void send_view_status(Vrendpoint* who, bool status);
    tamed void send_view_status(Json peer_name, bool status);
    void broadcast_view_status();
    void process_view_status(Vrendpoint* who, const Json& msg);
    void start_view_confirm();
    void process_view_confirm(Vrendpoint* who, const Json& msg);
    void start_view_adopt();
    tamed void send_view_adopt(Json peer_name, viewnumber_t viewno);
    void process_view_adopt(Vrendpoint* who, const Json& msg);

    tamed void listen_loop();
    tamed void interconnect_loop(Vrendpoint*);
};

#endif
